# =====================================================================================
# Build a Neural Network Model for Horse or Human Dataset.
# Expect to classify binary classes.
# Input layer should accept 150x150 with 3 bytes color as the input shape.
# The dataset used is created by Laurence Moroney (laurencemoroney.com).
# Desired accuracy and validation_accuracy > 83%
# ======================================================================================

import urllib.request
import zipfile
import tensorflow as tf
import os
from keras_preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop

def solution():
    data_url_1 = 'https://github.com/dicodingacademy/assets/releases/download/release-horse-or-human/horse-or-human.zip'
    urllib.request.urlretrieve(data_url_1, 'horse-or-human.zip')
    local_file = 'horse-or-human.zip'
    zip_ref = zipfile.ZipFile(local_file, 'r')
    zip_ref.extractall('data/horse-or-human')

    data_url_2 = 'https://github.com/dicodingacademy/assets/raw/main/Simulation/machine_learning/validation-horse-or-human.zip'
    urllib.request.urlretrieve(data_url_2, 'validation-horse-or-human.zip')
    local_file = 'validation-horse-or-human.zip'
    zip_ref = zipfile.ZipFile(local_file, 'r')
    zip_ref.extractall('data/validation-horse-or-human')
    zip_ref.close()

    TRAINING_DIR = 'data/horse-or-human'
    VAL_DIR = 'data/validation-horse-or-human'
    train_datagen = ImageDataGenerator(
        rescale=1.0/255.0
        )

    train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                        batch_size=20,
                                                        class_mode='binary',
                                                        target_size=(150, 150))
    val_datagen = ImageDataGenerator(
        rescale=1.0/255.0
    )
    val_generator = val_datagen.flow_from_directory(VAL_DIR,
                                                    batch_size=20,
                                                    class_mode='binary',
                                                    target_size=(150,150))

    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(16, activation='relu', input_shape=(150, 150, 3)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(128, activation='relu'),
        # YOUR CODE HERE, end with a Neuron Dense, activated by sigmoid
        tf.keras.layers.Dense(1, activation='sigmoid')
        ])
    model.compile(
        optimizer=RMSprop(learning_rate=0.001),
        loss='binary_crossentropy',
        metrics=['accuracy'])
    model.fit(train_generator, validation_data=val_generator,  epochs=5)
    return model
