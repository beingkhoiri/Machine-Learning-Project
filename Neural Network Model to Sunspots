# =======================================================================================
# Build and train a neural network model using the Sunspots.csv dataset.
# Use MAE as the metrics of your neural network model.
# The dataset used in this problem is downloaded from kaggle.com/robervalt/sunspots
# Desired MAE < 0.15 on the normalized dataset.
# ========================================================================================

import csv
import tensorflow as tf
import numpy as np
import urllib

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

def solution():
    data_url = 'https://github.com/dicodingacademy/assets/raw/main/Simulation/machine_learning/sunspots.csv'
    urllib.request.urlretrieve(data_url, 'sunspots.csv')

    time_step = []
    sunspots = []

    with open('sunspots.csv') as csvfile:
      reader = csv.reader(csvfile, delimiter=',')
      next(reader)
      for row in reader:
        sunspots.append(float(row[2]))
        time_step.append(int(row[0]))

    series = np.array(sunspots) # YOUR CODE HERE

    # Normalization Function.
    min=np.min(series)
    max=np.max(series)
    series -= min
    series /= max
    time=np.array(time_step)

    split_time=3000

    ttime_train = time[:split_time]
    x_train = series[:split_time]
    time_valid = time[split_time:]
    x_valid = series[split_time:] # YOUR CODE HERE

    window_size=30
    batch_size=32
    shuffle_buffer_size=1000

    train_set = windowed_dataset(x_train, window_size=window_size, batch_size=batch_size, shuffle_buffer=shuffle_buffer_size)

    from tensorflow.keras.layers import Bidirectional
    from tensorflow.keras.layers import LSTM

    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv1D(filters=30, input_shape=[None, 1], kernel_size=5,
                               strides=1, padding='causal', activation='relu'),
        tf.keras.layers.Bidirectional(LSTM(10, return_sequences=True)),
        tf.keras.layers.LSTM(60, return_sequences=True),
        tf.keras.layers.Dense(30,activation='relu'),
        tf.keras.layers.Dense(10, activation='relu'),
        tf.keras.layers.Dense(5, activation='relu'),
      # YOUR CODE HERE.
      tf.keras.layers.Dense(1)
    ])

    optimizer = tf.keras.optimizers.SGD(learning_rate=0.00001, momentum=0.9)
    model.compile(loss='mae', optimizer=optimizer, metrics=['mae'])

    model.fit(train_set, epochs=150)

    return model
