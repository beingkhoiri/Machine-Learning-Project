# =============================================================================
# Create a classifier for the MNIST Handwritten digit dataset.
# Expected to classify 10 classes.
# Desired accuracy AND validation_accuracy > 91%
# =============================================================================

import tensorflow as tf

def solution():
    mnist = tf.keras.datasets.mnist
    (train_images, train_labels), (validation_images, validation_labels) = mnist.load_data()

    # NORMALIZE IMAGE
    train_images = train_images / 255.
    validation_images = validation_images / 255.

    # End with 10 Neuron Dense, activated by softmax
    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(16, activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dense(1024, activation='relu'),
        tf.keras.layers.Dense(10, activation='softmax')
    ])

    model.compile(
        optimizer='adam',
        loss='sparse_categorical_crossentropy',
        metrics=['accuracy']
    )
 
    model.fit(train_images, train_labels, validation_data=(validation_images, validation_labels), epochs=10)
    return model
